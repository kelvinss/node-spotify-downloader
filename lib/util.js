// Generated by CoffeeScript 1.10.0
(function() {
  var chkFn, deepMap, fixPathPiece, fs, getSpotID, objTypeof, removeFile,
    hasProp = {}.hasOwnProperty;

  fs = require("fs");

  removeFile = function(filename, callback) {
    return fs.stat(filename, function(err, stats) {
      if (!err) {
        return fs.unlink(filename, callback);
      } else {
        return typeof callback === "function" ? callback() : void 0;
      }
    });
  };

  objTypeof = function(obj) {
    return Object.prototype.toString.call(obj);
  };

  chkFn = function(fn) {
    if (typeof fn === "function") {
      return fn;
    } else {
      return function(o) {
        return o;
      };
    }
  };

  deepMap = function(obj) {
    var dp, k, v;
    dp = deepMap.bind(this);
    if (objTypeof(obj) === "[object Array]") {
      return chkFn(this.array)(obj.map(dp));
    } else if (objTypeof(obj) === "[object Object]") {
      for (k in obj) {
        if (!hasProp.call(obj, k)) continue;
        v = obj[k];
        obj[k] = dp(v);
      }
      return chkFn(this.object)(obj);
    } else {
      return chkFn(this.fn)(obj);
    }
  };

  fixPathPiece = function(piece) {
    return piece.split(/[\/\\?%*:|"<>]/g).filter(function(i) {
      return !!i;
    }).join(" ");
  };

  getSpotID = function(uri) {
    var ref, ref1, splitd;
    splitd = (ref = uri != null ? uri.split(":") : void 0) != null ? ref : [];
    if ((ref1 = splitd[1]) === "track" || ref1 === "album" || ref1 === "artist") {
      return splitd[2];
    } else if (splitd[1] === "user" && splitd[3] === "playlist") {
      return splitd[4];
    }
  };

  module.exports = {
    removeFile: removeFile,
    objTypeof: objTypeof,
    deepMap: deepMap,
    fixPathPiece: fixPathPiece,
    getSpotID: getSpotID
  };

}).call(this);
